// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  userName    String    @unique
  password    String
  email       String    @unique
  profile     Profile?
  projects    Project[]
  Stars       Star[]
  starsNumber Int?
  Comments    Comment[]

  @@map("users")
}

model Profile {
  id                String              @id @default(uuid())
  bio               String?
  firstName         String?
  lastName          String?
  photo_url         String?
  User              User                @relation(fields: [userId], references: [id])
  userId            String              @unique
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  Gender            Gender?             @relation(fields: [genderName], references: [name])
  genderName        String?
  Pais              Pais?               @relation(fields: [paisLabel], references: [label])
  paisLabel         String?
  areaofProfile     AreaofProfile[]
  LinksOfProfile    LinkOfProfile[]
  LanguageOfProfile LanguageOfProfile[]
  ToolofProfile     ToolofProfile[]

  @@map("profiles")
}

model Pais {
  value    String    @id @default(uuid())
  label    String    @unique
  acronym1 String?
  acronym2 String?
  code     String?
  profile  Profile[]

  @@map("paises")
}

model Gender {
  id      String    @id @default(uuid())
  name    String    @unique
  Profile Profile[]

  @@map("genders")
}

model Star {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@id([userId, projectId])
  @@map("stars")
}

model Project {
  id                String              @id @default(uuid())
  user              User                @relation(fields: [userId], references: [id])
  userId            String
  title             String              @unique
  description       String
  images            Image[]
  videos            Video[]
  audios            Audio[]
  respository_url   String
  Comment           Comment[]
  stars             Star[]
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  LanguageOfProject LanguageOfProject[]
  ProjectRepository ProjectRepository?
  Language          Language[]
  AreaOfProject     AreaOfProject[]
  ToolOfProject     ToolOfProject[]

  @@map("projects")
}

model Image {
  id        String   @id @default(uuid())
  order     Int
  url       String   @unique
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  @@map("images")
}

model Video {
  id        String  @id @default(uuid())
  order     Int
  url       String  @unique
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@map("videos")
}

model Audio {
  id        String  @id @default(uuid())
  order     Int
  url       String  @unique
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@map("audios")
}

model LanguageOfProject {
  Project       Project? @relation(fields: [projectId], references: [id])
  projectId     String
  Language      Language @relation(fields: [languageLabel], references: [label])
  languageLabel String

  @@id([projectId, languageLabel])
}

model LanguageOfProfile {
  Profile       Profile?  @relation(fields: [profileId], references: [id])
  profileId     String
  Language      Language? @relation(fields: [languageLabel], references: [label])
  languageLabel String

  @@id([profileId, languageLabel])
}

model Language {
  value             String              @id @default(uuid())
  label             String              @unique
  icon_url          String
  Project           Project?            @relation(fields: [projectId], references: [id])
  projectId         String?
  LanguageOfProfile LanguageOfProfile[]
  LanguageOfProject LanguageOfProject[]

  @@map("languages")
}

model ProjectRepository {
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String   @unique
  link      String

  @@id([projectId, link])
}

model AreaofProfile {
  Area      Area?    @relation(fields: [areaLabel], references: [label])
  areaLabel String
  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String

  @@id([areaLabel, profileId])
}

model LinkOfProfile {
  Areas     Link?    @relation(fields: [linkName], references: [name])
  linkName  String
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String

  @@id([profileId, linkName])
}

model AreaOfProject {
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String
  Area      Area     @relation(fields: [areaLabel], references: [label])
  areaLabel String

  @@id([projectId, areaLabel])
}

model Area {
  value         String          @id @default(uuid())
  label         String          @unique
  image_url     String?
  AreaofProfile AreaofProfile[]
  AreaOfProject AreaOfProject[]

  @@map("areas")
}

model ToolOfProject {
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String
  Toll      Tool     @relation(fields: [toolLabel], references: [label])
  toolLabel String

  @@id([projectId, toolLabel])
}

model Tool {
  value         String          @id @default(uuid())
  label         String          @unique
  icon_url      String
  ToolofProfile ToolofProfile[]
  ToolOfProject ToolOfProject[]

  @@map("tools")
}

model ToolofProfile {
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String
  Tool      Tool?    @relation(fields: [toolLabel], references: [label])
  toolLabel String

  @@id([profileId, toolLabel])
}

model Link {
  id            String          @id @default(uuid())
  name          String          @unique
  src           String
  href          String
  LinkOfProfile LinkOfProfile[]

  @@map("links")
}

model Comment {
  id         String   @id @default(uuid())
  content    String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  created_at DateTime @default(now())
  Project    Project? @relation(fields: [projectId], references: [id])
  projectId  String?

  @@map("commments")
}

model BannedAccount {
  id        String   @id @default(uuid())
  email     String   @unique
  banned_at DateTime @default(now())

  @@map("bannedaccounts")
}
